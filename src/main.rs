#![deny(unsafe_code)]
#![no_main]
#![no_std]

use embedded_hal::blocking::serial::write;
// Halt on panic
use panic_halt as _;

use cortex_m_rt::entry;
use stm32f4xx_hal as hal;
use stm32f4xx_hal::i2c;
use crate::hal::{prelude::*, pwm, stm32};
use hal::{i2c::I2c, time::KiloHertz, };

// fn generateRandomCommand() -> [u8; 1] {
//     let size = 32_u8;
    
//     // cmd header mask = 
//     // 0b1110000
    
//     let i: [u8; 1] = [0];
//     i

// polling max 2500ms
// polling step 3ms
// }


#[entry]
fn main() -> ! {

    if let (Some(dp), Some(cp)) = (
        stm32::Peripherals::take(),
        cortex_m::peripheral::Peripherals::take(),
    ) {
        // A10 - A11

        // Set up the system clock.
        let rcc = dp.RCC.constrain();
        let clocks = rcc.cfgr.use_hse(8.mhz()).freeze();
        let mut delay = hal::delay::Delay::new(cp.SYST, clocks);
        let gpiob = dp.GPIOB.split();
        let (scl, sda) = (
            gpiob.pb6.into_alternate_af4_open_drain(),
            gpiob.pb7.into_alternate_af4_open_drain(),
        );

        let mut i2c = I2c::i2c1(dp.I2C1, (scl, sda), KiloHertz(100), clocks);

        let addr = 0x20;
        // CRC-16/X-25
        // let write_bytes: [u8; 2] = [0x01];
        let mut buff: [u8; 192] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        
        i2c.write(addr, &[0x01, 0xE1, 0xF1]);
        delay.delay_ms(35_u8);
        let res = i2c.read(addr, &mut [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

        delay.delay_ms(25_u8);
        // let res = i2c.write_read(addr, &write_bytes, &mut buff[..]);
        i2c.write(addr, &[0x02, 0x00, 0x02, 0x50, 0x66]);

        delay.delay_ms(25_u8);
        let res = i2c.read(addr, &mut [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

        // 00, 00, 0a, d0, c8, 4e, 54, 37, 4d
        loop {
            continue;
        }

    } else {
        loop {
            cortex_m::asm::nop();
        }
    }


}